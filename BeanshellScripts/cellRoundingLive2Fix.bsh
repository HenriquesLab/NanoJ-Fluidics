import nanoj.pumpControl.java.sequentialProtocol.GUI;
import org.micromanager.api.AcquisitionOptions; 
import ij.*;
import ij.process.*;
import ij.process.ImageStatistics;
import ij.io.OpenDialog;
import ij.IJ.*;
import org.micromanager.api.PositionList;
import org.micromanager.api.MultiStagePosition;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import ij.text.TextPanel;
import ij.measure.ResultsTable;
import java.nio.file.Files;
import java.io.FileWriter;
import java.lang.Math.*;
import ij.plugin.*;
import ij.plugin.frame.RoiManager;
import ij.measure.ResultsTable;

// for email sending
import java.util.Properties;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import java.io.File; 
import java.util.Scanner;



// -----------------------------------------------------------------------------------
// --------------------------------- Functions ---------------------------------------
// -----------------------------------------------------------------------------------

// --------------------------------- Cell rounding ---------------------------------------
boolean eventTriggerCellRounding(ImageProcessor ip, double thresholdTemp, FileWriter fileWriter){

	boolean cellsRounded = false;
	
	imp = new ImagePlus("thisFrame", ip);
	IJ.run(imp, "Gaussian Blur...", "sigma=0.5 scaled"); //------ this is in um
	IJ.setAutoThreshold(imp, "Otsu dark no-reset");

	Prefs.blackBackground = true;
	IJ.run(imp, "Convert to Mask", "");
	IJ.run(imp, "Fill Holes", "");
	IJ.run(imp, "Options...", "iterations=5 count=3 black pad do=Open");
	IJ.run(imp, "Analyze Particles...", "size=250-Infinity show=[Count Masks] display exclude clear in_situ");

	ResultsTable rt = ResultsTable.getResultsTable();
	int nColCirc = rt.getColumnIndex("Circ.");

	if (nColCirc > 0){

		double[] thisColData = rt.getColumnAsDoubles(nColCirc);
		int nObjects = thisColData.length;
		gui.message("Number of objects: "+nObjects);

		circularity = 0;
		for (i=0; i < nObjects; i++) {
    	circularity += rt.getValue("Circ.", i)/nObjects;
		}

		gui.message("Current circularity: "+circularity);
		fileWriter.write("Number of objects: "+nObjects+linesep);
		fileWriter.write("Current circularity: "+circularity+linesep);
		fileWriter.flush();

		if (circularity > thresholdTemp) cellsRounded = true;
	}
	else {
		gui.message("No objects there...");
		fileWriter.write("No objects there..."+linesep);
		fileWriter.flush();
	}

	imp.close();
	return cellsRounded;
	
}



// --------------------------------- Channel settings ---------------------------------------
boolean setMyChannelsRight(String acqName, String[] channelsList){

	boolean allGood = true;
	for (int i=0; i<channelsList.length; i++){
		gui.setChannelName(acqName, i, channelsList[i]);

		switch(channelsList[i]) {

		case "DAPI":
		Color thisColor = Color.BLUE;
		break;
	
		case "GFP":
		Color thisColor = Color.GREEN;
		break;

		case "mCherry":
		Color thisColor = Color.RED;
		break;

		case "Cy5":
		Color thisColor = Color.ORANGE;
		break;

		case "BF":
		Color thisColor = Color.LIGHT_GRAY;
		break;

		default:
		}

		try {gui.setChannelColor(acqName, i, thisColor);}
		catch(e){
			gui.message("Caught a color-setting problem: "+e );
			allGood = false;
		}
	}

	return allGood;
}


// --------------------------------- Send emails ---------------------------------------
boolean sendEmail(String emailAddress, String messageSubject, String messageCore, String emailFrom, String passwordFrom){

	boolean emailSentOK = false;
	// Setup mail server
	Properties properties = System.getProperties();
	properties.setProperty("mail.smtp.host", "smtp.gmail.com");
	properties.put("mail.smtp.port", "587");
	properties.setProperty("mail.user", emailFrom);
	properties.setProperty("mail.password", passwordFrom);
	properties.put("mail.smtp.starttls.enable", "true");
	properties.put("mail.smtp.auth", "true"); //enable authentication

	authenticator = new javax.mail.Authenticator() {
   	         protected javax.mail.PasswordAuthentication getPasswordAuthentication() {
      	          return new javax.mail.PasswordAuthentication(emailFrom, passwordFrom);
         	   }
        	};

	Session session;
	session = Session.getInstance(properties, authenticator);
	//session = Session.getDefaultInstance(properties, authenticator);

        try {
            // Create a default MimeMessage object.
            MimeMessage message = new MimeMessage(session);

            // Set From: header field of the header.
            message.setFrom(new InternetAddress(emailFrom));

            // Set To: header field of the header.
            message.addRecipient(Message.RecipientType.TO, new InternetAddress(emailAddress));

            // Set Subject: header field
            message.setSubject(messageSubject);

            // Now set the actual message
            message.setText(messageCore);

            // Send message
            Transport.send(message);
				emailSentOK = true;            
            //System.out.println("Sent message successfully....");
        } catch (MessagingException mex) {
            mex.printStackTrace();
        }

	return emailSentOK;
}



// ------------------------------------------------------------------------------------------
// Settings to be set by user


boolean useMultiPosition = true;

// Pre-pumping acquisition ---

String[] prePumpChannels = {"GFP", "mCherry"}; // set "BF" for bright field image (performed with the current filter set)
double[] allExposuresPrePump = {100, 100};

timeIntervals = 5; // in seconds (300 s = 5 min)
int nFramesMax = 3; // maximum number of frames before pumps are activated


double minFraction = 0.25; // fraction of FOV that have triggered necessary to trigger the pumps

// Parameter for cell rounding ---
double thresholdCircularity = 0.82; // threshold in circularity
channelNumberForAnalysis = 0; // this is zero-based !!!!!!!!!!!!!!!!!!!!

waitingPostImageTrigger = 0; // in seconds (after clock starts) (4h min = 14,400 ss)


// Post-pumping acquisition ---

String[] postPumpChannels = {"DAPI","GFP", "mCherry","Cy5","BF"};
//String[] postPumpChannels = {"DAPI", "mCherry"};
double[] allExposuresPostPump = {200, 200, 200, 200, 200};
timeIntervalsPostPump = 300; // in seconds
int nFramesPostPump = 1;

double dZ = 1; // in um
int nZposNegative = 0;
int nZposPositive = 0;

// file locations ---
acqName = "myAcquisitionName";
rootDirName = "E:/UserData/";


// For email sending
String myEmailAddress = "youremail@email.com";


// Let's get started ! ---------------------------------------------------------------------





seqProt = GUI.INSTANCE;
gui.clearMessageWindow();
gui.closeAllAcquisitions();
SimpleDateFormat sdf = new SimpleDateFormat("MMM dd,yyyy HH:mm:ss");

// Creating metadata file
fileMetadata = new File(rootDirName+"/ReadmePlease.txt");
int i = 1;
while (fileMetadata.exists()) {
	fileMetadata = new File(rootDirName+"/ReadmePlease_"+i+".txt");
	i++;
}

bool = fileMetadata.createNewFile();
//gui.message("Metadata file created: "+bool);
FileWriter fileWriter = new FileWriter(fileMetadata);

if (!(prePumpChannels[0].equals("BF"))) mmc.setShutterDevice("Flurorescence");

timeIntervals = timeIntervals*1000; // convert s into ms
waitingPostImageTrigger = waitingPostImageTrigger*1000; // convert s into ms
timeIntervalsPostPump = timeIntervalsPostPump*1000; // convert s into ms
int nSlices = nZposNegative + nZposPositive + 1;


gui.message("-------------------------------------------------------");
gui.message("---- Welcome to Pumpy land ! ----");

long now = System.currentTimeMillis();
gui.message("Start time: " + sdf.format(new Date(now)));

// Write settings in the metadata file
linesep = System.getProperty( "line.separator" );
fileWriter.write("Start time: " + sdf.format(new Date(now))+linesep);
fileWriter.write("Acquisition name: "+acqName+linesep);
fileWriter.write("--------------------"+linesep);
fileWriter.write("Pre-pump settings:"+linesep);
for (i = 0; i<prePumpChannels.length; i++){
	fileWriter.write(prePumpChannels[i]+"\t");
}
fileWriter.write(linesep);
for (i = 0; i<allExposuresPrePump.length; i++){
	fileWriter.write(allExposuresPrePump[i]+"\t");
}
fileWriter.write(linesep);
fileWriter.write("Time interval: "+(timeIntervals/1000)+"s"+linesep);
fileWriter.write("Maximum number of frames before pumps: "+nFramesMax+linesep);
fileWriter.write("--------------------"+linesep);
fileWriter.write("Triggering based on circularity:"+linesep);
fileWriter.write("Channel for analysis: "+channelNumberForAnalysis+linesep);
fileWriter.write("Circularity threshold: "+thresholdCircularity+linesep);

fileWriter.write("Time to wait after event is triggered: "+(waitingPostImageTrigger/1000)+"s"+linesep);
fileWriter.write("Minnimum fraction of FOV for pump trigger: "+minFraction+linesep);

fileWriter.write("--------------------"+linesep);
fileWriter.write("Post-pump settings:"+linesep);
for (i = 0; i<postPumpChannels.length; i++){
	fileWriter.write(postPumpChannels[i]+"\t");
}
fileWriter.write(linesep);
for (i = 0; i<allExposuresPostPump.length; i++){
	fileWriter.write(allExposuresPostPump[i]+"\t");
}
fileWriter.write(linesep);
fileWriter.write("Time interval: "+(timeIntervalsPostPump/1000)+"s"+linesep);
fileWriter.write("Number of frames: "+nFramesPostPump+linesep);
fileWriter.write("N plane negative Z: "+nZposNegative+linesep);
fileWriter.write("N plane positive Z: "+nZposPositive+" (um)"+linesep);
fileWriter.write("deltaZ: "+dZ+linesep);

// Check for credentials for email 
File file = new File(IJ.getDirectory("startup")+"\\pumpyEmailCredentials.txt");
boolean sendEmailOrNot = false;
fileWriter.write("--------------------"+linesep);
if (file.exists()){
	Scanner sc = new Scanner(file); 
	emailFrom = sc.nextLine();
	passwordFrom = sc.nextLine();
	
	sendEmailOrNot = true;
	gui.message("Credentials found. Sending emails to "+myEmailAddress);
	fileWriter.write("Credentials found. Sending emails to "+myEmailAddress+linesep);
}
else{
	gui.message("Credentials file does not exist. Emails cannot be sent.");
	fileWriter.write("Credentials file does not exist."+linesep);
	emailFrom = "";
	passwordFrom = "";
}

fileWriter.flush();


// Stop live mode
if (gui.isLiveModeOn()) gui.enableLiveMode(false);

// Set the measurements
IJ.run("Set Measurements...", "area mean standard min perimeter shape median redirect=None decimal=3");





// Let's go !!! ------------------------------------------

PositionList pl = new PositionList();
if (useMultiPosition){
	// Stage positions (as set in MD before running this code)
	pl = gui.getPositionList();
}

else{
	double[] x_stage = new double[1];
	double[] y_stage = new double[1];
	mmc.getXYPosition(x_stage, y_stage);
	double z_stage = mmc.getPosition();
		
	xyStage = mmc.getXYStageDevice();
	zStage = mmc.getFocusDevice();
	MultiStagePosition msp = new MultiStagePosition(xyStage, x_stage[0], y_stage[0], zStage, z_stage);
	pl.addPosition(msp);
}


nPositions = pl.getNumberOfPositions();
gui.message("Number of positions: "+nPositions);
fileWriter.write("--------------------"+linesep);
fileWriter.write("Number of positions: "+nPositions+linesep);
fileWriter.flush();

if (nPositions == 0) {
	gui.message("Bye-bye !");
	return;
}

for (int i = 0; i < nPositions; i++){
	double x = pl.getPosition(i).getX();
	double y = pl.getPosition(i).getY();
	double z = pl.getPosition(i).getZ();
	// gui.message("XYZ positions: "+x+" - "+y+" - "+z);
}


// Autofocus code
afDevice = mmc.getAutoFocusDevice();
//gui.message("Autofocus device: "+afDevice);
mmc.enableContinuousFocus(true);
mmc.setProperty("PFS Status","FullFocusTimeoutMs",15000);
mmc.setProperty("Core","TimeoutMs",15000);
int nPFSfail = 0;
// -------------------------------------------------------


// Get info about the images
mmc.setExposure(10); // ms
mmc.snapImage();
img = mmc.getImage();
int width = mmc.getImageWidth(); // necessary for the functions
int height = mmc.getImageHeight();
int byteDepth = mmc.getBytesPerPixel();

boolean show = true;
boolean save = true;

gui.openAcquisition(acqName+"_prePumping", rootDirName, nFramesMax, prePumpChannels.length, 1, nPositions, show, save);


// Main loops ---

// define and set the decisions
double[] decisionPerFOV = new double[nPositions];
double nFOVtriggered = 0;
for (int np = 0; np < nPositions; np++) {
	decisionPerFOV[np] = 0;
}

boolean emailWarningSentOK = false;
boolean emailSentOK = false;
boolean eventDetected = false;
boolean thisFOVtriggered = false;
fileWriter.write("------------------------------------"+linesep);
fileWriter.flush();

int nWaitfail = 0;

for (int nf = 0; nf < nFramesMax; nf++){
	now = System.currentTimeMillis();
	gui.message("Frame: "+(nf+1)+"/"+nFramesMax);
	fileWriter.write("-"+linesep);
	fileWriter.write("Frame: "+(nf+1)+"/"+nFramesMax+linesep);
	fileWriter.flush();

	for (int np = 0; np < nPositions; np++) {
		gui.message("Position: "+(np+1)+"/"+nPositions);
		fileWriter.write("Position: "+(np+1)+"/"+nPositions+linesep);
		fileWriter.flush();
		MultiStagePosition.goToPosition(pl.getPosition(np), mmc);

		try {
			mmc.fullFocus();
		}
		catch (e) {
			gui.message("Caught a PFS problem (modafuka): "+e );
			fileWriter.write("Caught a PFS problem (modafuka): "+e +linesep);
			fileWriter.flush();
			nPFSfail++;
			}

		nc = 0;
		for (thisChannel : prePumpChannels){

			gui.message("Setting "+thisChannel+" channel.");
			fileWriter.write("Setting "+thisChannel+" channel."+linesep);
			fileWriter.flush();

			if (thisChannel.equals("BF")) mmc.setShutterDevice("Transmitted Light Shutter");
			else mmc.setConfig("Channel", thisChannel);
			
			mmc.setExposure(allExposuresPrePump[nc]);

			try {
				mmc.waitForSystem();
			}
			catch ( e ) {
				gui.message("Caught a waitforsystem problem (modafuka): "+ e );
				nWaitfail++;
			}
			
			gui.snapAndAddImage(acqName+"_prePumping", nf,nc,0,np); // ---------------------- here's the snap !
			if (thisChannel.equals("BF")) mmc.setShutterDevice("Flurorescence");

			// Pick the ip from the acquisition at the right channel
			if (nc == channelNumberForAnalysis) {
				ipAnalysis = new ShortProcessor(width, height);
				while (mmc.deviceBusy(mmc.getCameraDevice())) mmc.noop();
				ipAnalysis.setPixels(mmc.getImage());
			}
			
			nc ++;
		}

		if (nf == 0 && np == 0) setMyChannelsRight(acqName+"_prePumping", prePumpChannels);

		// Check for event triggering in the current FOV
		thisFOVtriggered = eventTriggerCellRounding(ipAnalysis, thresholdCircularity, fileWriter);

		//if (nf == 2) thisFOVtriggered = true; // FOR TESTING !!!!!!!!!!!!!!! --------------------- remove !
		
		// if it's been triggered, check the overall fraction of triggered FOV
		if (thisFOVtriggered){
			decisionPerFOV[np] = 1;
			double currentFraction = 0;
			nFOVtriggered = 0;
			for (int i = 0; i < nPositions; i++) {
				currentFraction += decisionPerFOV[i]/nPositions;
				nFOVtriggered += decisionPerFOV[i];
			}

			if ((nFOVtriggered) == (Math.ceil(minFraction*nPositions)-1) && !emailWarningSentOK && sendEmailOrNot){ // all FOVs triggered minus 1!
				emailWarningSentOK = sendEmail(myEmailAddress,"Pumpy about to trigger!","Dear beloved Pumpy customer, \n Nearly all the required number of FOVs have triggered (just one FOV missing).\n Pumpy", emailFrom, passwordFrom);
				if (emailWarningSentOK) gui.message("Email sent successfuly !");
				fileWriter.write("Email sent successfuly !"+linesep);
			}

			//if (nf == 2) currentFraction = 1; // FOR TESTING !!!!!!!!!!!!!!! --------------------- remove !
			
			if (currentFraction >= minFraction && !eventDetected) { // don't execute if event has already been detected
				gui.message("Event detected.");
				fileWriter.write("-------"+linesep+"Event detected."+linesep+"-------"+linesep);
				eventDetected = true;
				int addedFrames = Math.round(waitingPostImageTrigger/timeIntervals);
				nFramesMax = nf + addedFrames;
				gui.message("Adding "+addedFrames+" frames.");
				fileWriter.write("Adding "+addedFrames+" frames."+linesep);

				if (sendEmailOrNot){
					emailSentOK = sendEmail(myEmailAddress,"Pumpy just triggered!","Dear beloved Pumpy customer, \n The required number of FOVs have triggered. There will be "+addedFrames+" added frames before pumps are activated.\n Pumpy", emailFrom, passwordFrom);
					if (emailSentOK) {
						gui.message("Email sent successfuly !");
						fileWriter.write("Email sent successfuly !"+linesep);
					}
				}
				fileWriter.flush();
			}
		}

	}

	
	gui.message("Number of FOV triggered: "+nFOVtriggered+"/"+nPositions);
	fileWriter.write("Number of FOV triggered: "+nFOVtriggered+"/"+nPositions+"."+linesep);
	mmc.enableContinuousFocus(true);
	// Finish waiting if necessary
	gui.message("Next time frame at: " + sdf.format(new Date(now + timeIntervals)));
	itTook = System.currentTimeMillis() - now;
	gui.message("Waiting...");
	if (nf < nFramesMax-1) gui.sleep(timeIntervals - itTook);

}


gui.closeAcquisition(acqName+"_prePumping");



// NanoJ-Fluidics stuff ---------------------------------------------

/* 
 *  You may start the NanoJ-Fluidics GUI and design the protocol through it.
 *  Once the GUI has connected to pumps and the protocol specified, you can:

print( seqProt.startSequence() );                      // Start the entire sequence
print( seqProt.startSequence(2,4) );                   // Or just a portion of the sequence, e.g. from steps 2 to 4
print( seqProt.stopSequence() );                       // Stop the sequence
print( "Running: " + seqProt.sequenceRunning() );      // Get the status of the sequence (as a boolean)
print( "Current step: " + seqProt.getCurrentStep() );  // Get what is the current step (-1 if not running)
print( seqProt.stopAllPumps() );                       // If something goes wrong you can stop all pumps
print( seqProt.stopPump(1) );                          // Or a specific pump (value from 1 to N connected pump).
*/

now = System.currentTimeMillis();
gui.message("Next time frame at: " + sdf.format(new Date(now)));
fileWriter.write("---------------------------"+linesep);
fileWriter.write("Pumping..."+linesep);
fileWriter.flush();

if (eventDetected){
	messageSubject = "Pumps are activating!";
	messageCore = "Dear beloved Pumpy customer, \n Following image triggering, the pumps will now be activated.\n Pumpy";
}
else {
	messageSubject = "Pumps are activating! (Pre-pump frames exceeded)";
	messageCore = "Dear beloved Pumpy customer, \n The maximum number of frames pre-pumping has been exceeded. The pumps will be activated now.\n Pumpy";
}

if (sendEmailOrNot){
	emailSentOK = sendEmail(myEmailAddress,messageSubject,messageCore, emailFrom, passwordFrom);
	if (emailSentOK) gui.message("Email sent successfuly !");
}


print(seqProt.startSequence() );

int previoustStep = 0;

while(seqProt.sequenceRunning())
	if(previoustStep != seqProt.getCurrentStep()) {
		now = System.currentTimeMillis();
		gui.message("Current step: " + seqProt.getCurrentStep() + "(" + sdf.format(new Date(now))+")");
		fileWriter.write("Current step: " + seqProt.getCurrentStep() + "(" + sdf.format(new Date(now))+")"+linesep);
		fileWriter.flush();

		previoustStep = seqProt.getCurrentStep();
	}





// Post-fluidics acquisition ---------------------------------------------

fileWriter.write("---------------------------"+linesep);
fileWriter.write("Post-pumping acquisition..."+linesep);
fileWriter.flush();

//gui.message("R: "+rootDirName);
//gui.message("nframes: "+nFramesPostPump);
//gui.message("channels: "+postPumpChannels.length);
//gui.message("nSlices: "+nSlices);
//gui.message("nPosi: "+nPositions);


gui.openAcquisition(acqName+"_postPumping", rootDirName, nFramesPostPump, postPumpChannels.length, nSlices, nPositions, show, save);


if (!(postPumpChannels[0].equals("BF"))) mmc.setShutterDevice("Flurorescence"); // make sure it's in flurorescence

// Looping around!
for (int nf = 0; nf < nFramesPostPump; nf++){
	
	now = System.currentTimeMillis();
	gui.message("Frame: "+(nf+1)+"/"+nFramesPostPump);
	fileWriter.write("Frame: "+(nf+1)+"/"+nFramesPostPump+linesep);
	fileWriter.flush();
	
	for (int np = 0; np < nPositions; np++) {
		
		gui.message("Position: "+(np+1)+"/"+nPositions);	
		fileWriter.write("Position: "+(np+1)+"/"+nPositions+linesep);
		fileWriter.flush();
		
		MultiStagePosition.goToPosition(pl.getPosition(np), mmc);

		try {
			mmc.fullFocus();
		}
		catch ( e ) {
			gui.message("Caught a PFS problem (modafuka): "+ e );
			nPFSfail++;
			}
			
		mmc.waitForSystem();
		thisZ0 = mmc.getPosition();
		//gui.message("Z position for XY: "+thisZ0);
		mmc.setPosition(thisZ0 - (nZposNegative+1)*dZ);
		mmc.waitForDevice("Z Stage");

		for (int ns = 0; ns < nSlices; ns++) {

			mmc.setRelativePosition(dZ);
			
			nc = 0;
			for (thisChannel : postPumpChannels){
				gui.message("Setting "+thisChannel+" channel.");
				if (thisChannel.equals("BF")) mmc.setShutterDevice("Transmitted Light Shutter");
				else mmc.setConfig("Channel", thisChannel);	
				mmc.setExposure(allExposuresPostPump[nc]);
			
				//mmc.waitForDevice("Z Stage");
				try {
					mmc.waitForSystem();
				}
				catch ( e ) {
					gui.message("Caught a waitforsystem problem (modafuka): "+ e );
					nWaitfail++;
				}
				//gui.message("Z="+mmc.getPosition());
				gui.snapAndAddImage(acqName+"_postPumping", nf,nc,ns,np);
				if (thisChannel.equals("BF")) mmc.setShutterDevice("Flurorescence");
				nc ++;
			}

			if (nf == 0 && ns == 0 && np == 0) setMyChannelsRight(acqName+"_postPumping", postPumpChannels);
			
		}
		
	}

	mmc.enableContinuousFocus(true);
	// Finish waiting if necessary
	gui.message("Next time frame at: " + sdf.format(new Date(now + timeIntervalsPostPump)));
	itTook = System.currentTimeMillis() - now;
	gui.message("Waiting...");
	if (nf < nFramesPostPump-1) gui.sleep(timeIntervalsPostPump - itTook);
	
}

gui.closeAcquisition(acqName+"_postPumping");

// Finish him !! --------------------------------------------
gui.message("--------------------------------");
now = System.currentTimeMillis();
gui.message("Finish time: " + sdf.format(new Date(now)));
gui.message("Number of PFS fail: "+nPFSfail);
gui.message("Number of WaitForSytem fail: "+nWaitfail);
gui.message("All done, mate.");

fileWriter.write("--------------------------"+linesep);
fileWriter.write("Finish time: " + sdf.format(new Date(now))+linesep);
fileWriter.write("Number of PFS fail: "+nPFSfail+linesep);
fileWriter.write("All done, mate."+linesep);
fileWriter.flush();

fileWriter.close();

if (sendEmailOrNot){
	emailSentOK = sendEmail(myEmailAddress,"Pumpy all done.","Dear,\n Pumpy has now finished the post-pumping acquisition. \n Cheers, \n Yours truly.", emailFrom, passwordFrom);
	if (emailSentOK) gui.message("Email sent successfuly !");
}

